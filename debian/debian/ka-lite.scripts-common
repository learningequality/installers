# -*- sh -*-
# This file can be included with #SCRIPTSCOMMON#
# Thanks to the openldap debian package for this
# method!

# Tracebacks in bash
# https://docwhat.org/tracebacks-in-bash/
#
# Just take the code between the "cut here" lines
# and put it in your own program.
#
# Written by Christian HÃ¶ltje
# Donated to the public domain in 2013

#--------->8---------cut here---------8<---------
set -e

trap _exit_trap EXIT
trap _err_trap ERR
_showed_traceback=f

function _exit_trap
{
  local _ec="$?"
  if [[ $_ec != 0 && "${_showed_traceback}" != t ]]; then
    traceback 1
  fi
}

function _err_trap
{
  local _ec="$?"
  local _cmd="${BASH_COMMAND:-unknown}"
  traceback 1
  _showed_traceback=t
  echo "The command ${_cmd} exited with exit code ${_ec}." 1>&2
}

function traceback
{
  # Hide the traceback() call.
  local -i start=$(( ${1:-0} + 1 ))
  local -i end=${#BASH_SOURCE[@]}
  local -i i=0
  local -i j=0

  echo "Traceback (last called is first):" 1>&2
  for ((i=${start}; i < ${end}; i++)); do
    j=$(( $i - 1 ))
    local function="${FUNCNAME[$i]}"
    local file="${BASH_SOURCE[$i]}"
    local line="${BASH_LINENO[$j]}"
    echo "     ${function}() in ${file}:${line}" 1>&2
  done
}

#--------->8---------cut here---------8<---------

# source debconf library
. /usr/share/debconf/confmodule

debug()
{
    if ! [ "$KALITE_DEB_DEBUG" = "" ]
    then
        echo "$1"
    fi
}

args=("$@")

# References:
# More info on debconf: "man debconf-devel"
#   install debconf-doc and debian-policy first!
# Debconf tutorial:
# http://www.fifi.org/doc/debconf-doc/tutorial.html

major_version() {
    echo -n "0.17"
    # This doesn't work for all maintainer scripts
    # echo "${args[1]}" | sed 's/\([0-9]*\.[0-9]*\).*/\1/'
}

export STATE_FILE=/tmp/kaliteinstall.state

has_state() {
    debug "Checking for state $1"
    if [ -f "$STATE_FILE" ]
    then
        grep -q "$1" "$STATE_FILE"
        has_state=$?
        debug "Result: $has_state"
        return $has_state
    fi
    debug "No state file"
    return 2
}

add_state() {
    debug "Adding state $1"
    echo $1 >> "$STATE_FILE"
}

rm_states() {
    debug "Removing states"
    rm -f "$STATE_FILE"
}

##################################################
# INSTALLATION: 1) Configuration
##################################################

# Fetches known configuration and sets variables
kalite_get_config()
{
    # This function exports variables of the configuration

    # Create user for ka-lite if it doesn't exist
    db_get ka-lite/user
    export KALITE_USER="$RET"

    # Where to store tmp data while downloading
    db_get ka-lite/preseed-dir
    export PRESEED_DIR="${RET}"

    # Custom setup.py for the user
    db_get ka-lite/kalite-settings
    export SETTINGS_PY="${RET}"

    # Enable init.d script
    db_get ka-lite/init
    [ "$RET" = "true" ] && export ENABLE_INIT_D=true || export ENABLE_INIT_D=false

}

# Ask the users questions
# Used in .config
kalite_debconf_ask()
{
    
    if ! has_state "after_preinst"
    then
        return
    fi

    # Get the current configuration -- or rather: These are the defaults
    # or presets before asking.
    kalite_get_config
    
    db_settitle ka-lite/window-title
    db_go || true

    # Run as system script?
    db_input high ka-lite/init || true
    
    # Which user should run the script?
    KALITE_USER=""
    while [ "$KALITE_USER" = "" ]; do
      db_input critical ka-lite/user || true
      db_go || true
      db_get ka-lite/user
      KALITE_USER="$RET"
    done

    # Give init.d instructions
    db_go || true
    db_get ka-lite/init
    if [ "$RET" = "true" ]
    then
        db_input high ka-lite/init-instructions || true
    else
        db_input high ka-lite/manual-instructions || true
    fi

    # Check to see if there's anything downloaded already
    export EXISTING_CONTENT=""
    
    # This way of writing if statements with failing sub commands will work
    # while using errexit
    getent passwd "$KALITE_USER" > /dev/null && {
        USER_CONFIG_DIR=`su -s /bin/sh $KALITE_USER -c "echo \\$HOME"`/.kalite
        if [ -d "$USER_CONFIG_DIR" ]
        then
            EXISTING_CONTENT="$USER_CONFIG_DIR/content/assessment"
        fi
    }
    
    # If there are no existing contents, display a text box telling the user to
    # fetch content packs after the installation
    if [ "EXISTING_CONTENT" = "" ]
    then
      db_input high ka-lite/contentpack-manual || true    
    fi

    db_go || true

}


# Configures the package during the postinst script
# DOES NOT ASK ANY QUESTIONS - This is done through the config scripts and the
# kalite_ask_questions command
kalite_configure()
{
    
    kalite_get_config
    
    vers=`major_version`
    
    # User setup
    echo "$KALITE_USER" > /etc/ka-lite/username

    # This way of writing if statements with failing sub commands will work
    # while using errexit
    ( ! getent passwd "$KALITE_USER" ) && {
        echo "Creating new user $KALITE_USER"
        adduser --system --shell /bin/bash --home "/var/$KALITE_USER" "$KALITE_USER"
    }    

    # Do we have string defined for settings.py?
    if ! [ "$SETTINGS_PY" = "" ]
    then
        USER_CONFIG_DIR=`su -s /bin/sh $KALITE_USER -c "echo \\$HOME"`/.kalite
        mkdir -p "$USER_CONFIG_DIR"
        USER_CONFIG="$USER_CONFIG_DIR/settings.py"
        touch "$USER_CONFIG"
        echo "Changing user config to use package pre-defined settings: $USER_CONFIG"
        echo "$SETTINGS_PY" > "$USER_CONFIG"
        KALITE_USER_GROUP=`id -g -n "$KALITE_USER"`
        chown -R "$KALITE_USER:$KALITE_USER_GROUP" "$USER_CONFIG_DIR"
    fi

    if $ENABLE_INIT_D
    then
        # Remove because we might re-register as systemd during an upgrade
        update-rc.d -f ka-lite remove

        # Register init script as service
        if which systemctl > /dev/null 2>&1 ; then
            # Works no matter if it's already enabled
            systemctl enable ka-lite
            systemctl start ka-lite || true
        # Sysv
        else
            # Works no matter if it's already enabled
            update-rc.d ka-lite defaults
            # Start service -- nevermind if it fails
            invoke-rc.d ka-lite start || true
        fi
        
    fi

    # We don't download stuff during installation anymore.
    # This old location can be safely purged to save space.
    rm -rf /usr/share/kalite/assessment

    add_state "after_postinst"
    
}


kalite_purge()
{

    # We don't download stuff during installation anymore.
    # This old location can be safely purged.
    rm -rf /usr/share/kalite/assessment

    # The below is disabled because dh_systemd takes care of it
    # Remove service file using `ucf` (checking whether `ucf` is still available first)
    # if type ucf >/dev/null 2>&1;
    # then
    #     ucf --purge "/etc/init.d/ka-lite"
    # fi

    # Remove service file by hand (in case the above failed somehow)
    # rm -f "/etc/init.d/ka-lite"

}


# This is run at the beginning of kalite_debconf_ask
# ka-lite.config is run twice: before ka-lite.preinst
# and after ka-lite.postinst configure!
kalite_debconf_set_defaults()
{
    if has_state "did_set_defaults"
    then
        return
    fi

    add_state "did_set_defaults"
  
    if [ "${args[0]}" = "configure" ]
    then
        
        # Ask for user name, default is ka-lite
        # First, test if the username is already seen. Otherwise, change it and
        # mark it as unseen (changing a db value automatically marks it as seen)
        db_fget ka-lite/user seen
        USER_SEEN="$RET"
        if [ "$USER_SEEN" == "false" ] && ! [ "$SUDO_USER" = "" ]
        then
            # Set default to the user running the installation
            db_set ka-lite/user "$SUDO_USER"
            db_fset ka-lite/user seen false
        fi

        # Because of some strange bug in debconf, we always purge the notes
        # separately -- and this cannot be done in kalite_purge because then
        # debconf will assume that the note should be displayed unconditionally
        # without calling db_input
        # Furthermore, the note contents may have changed
        db_fset ka-lite/manual-instructions seen false
        db_fset ka-lite/init-instructions seen false
    fi
    
}


kalite_preinst()
{
    
    # Only do this if install, abort-upgrade
    if [ "${args[0]}" = "install" ] ||
       [ "${args[0]}" = "upgrade" ]
    then
        
        if [ -x /etc/init.d/ka-lite ]
        then
            # Stop service -- nevermind if it fails
            invoke-rc.d ka-lite stop || true
        fi

    
        # Remove pyc files from previous installations
        # Why not with pyclean? BECAUSE PYTHON IS NOT IN PRE-DEPENDS, SO WE CANNOT
        # ASSUME THAT IT EXISTS!!
        # TODO: This can be removed once we stop support for 0.16 upgrades, because
        # these directories will not contain non-managed pyc files from 0.16+
        if [ -d /usr/share/kalite/ ]
        then
            find /usr/share/kalite/ -name '*pyc' -exec rm {} \;
        fi

    fi

    add_state "after_preinst"

}



# Not currently being called - we don't know which content pack, the user will
# choose to download, and we assume most people have enough free disk space at
# this point...
kalite_debconf_size_check()
{
    if has_state "did_check_size"
    then
        return
    fi
    
    add_state "did_check_size"
    
    # Only do this if install, not upgrade or abort-upgrade
    if [ "${args[0]}" = "configure" ]
    then

        # Ask about downloading assessment items...
        # Real size of .zip, but we add some extra...
        # DISKSPACE_REQUIRED=503508
        DISKSPACE_REQUIRED=523508
        DISKSPACE_AVAILABLE_TMP=`df /tmp | awk '/[0-9]%/{print $(NF-2)}'`
        DISKSPACE_AVAILABLE_USR=`df /usr/share | awk '/[0-9]%/{print $(NF-2)}'`

        ASK_ABOUT_ASSESSMENT_ITEMS=true

        if [ $DISKSPACE_AVAILABLE_TMP -lt $DISKSPACE_REQUIRED ] || [ $DISKSPACE_AVAILABLE_USR -lt $DISKSPACE_REQUIRED ]
        then
            db_set ka-lite/download-assessment-items false
            db_fset ka-lite/download-assessment-items seen true
            db_set ka-lite/download-assessment-items-storage-error true
            db_fset ka-lite/download-assessment-items-storage-error seen true
        else
            db_set ka-lite/download-assessment-items-storage-error false
            db_fset ka-lite/download-assessment-items-storage-error seen true
        fi
    fi
}


# Run as the final script in .config
kalite_debconf_finalize() {
    # Nothing to do
    return 0
}


kalite_prerm()
{
    # Ensure there's no state file for tracking states during installs    
    rm_states
    
    # Load debconf library
    . /usr/share/debconf/confmodule

    # Stop the service before upgrade or removal
    set +e
    invoke-rc.d ka-lite stop || echo "Failed to stop ka-lite"
    set -e

    # Check if the user decided the enable the service using `db_get`
    db_get ka-lite/init
    if [ "${RET}" != "false" ];
    then
        if [ "$1" = "remove" ] || [ "$1" = "deconfigure" ];
        then
            # Unregister service prior to removal
            update-rc.d -f ka-lite remove
        fi
    fi

    # Nevermind testing, pyclean is part of python-minimal, we let it be a dependency
    # and don't mind cases where someone even removes python-minimal
    # TODO: This can be removed once we stop support for 0.16 upgrades, because
    # these directories will not contain non-managed pyc files from 0.16+
    
    pyclean -p $DPKG_MAINTSCRIPT_PACKAGE

    pyclean /usr/share/kalite/

    db_stop


}


# We started diverting /etc/nginx/nginx.conf in 0.14
diversion_added_version=0.14

# Called from postinst
kalite_nginx_divert_add()
{
    # Diversion for /etc/nginx/nginx.conf
    # https://wiki.debian.org/Adding%20and%20removing%20diversions
    # pkg=ka-lite-raspberry-pi
    
    this_version=`major_version`
    if
        test "${args[0]}" = install ||
        dpkg --compare-versions "${args[1]}" lt "$diversion_added_version" ||
        dpkg --compare-versions "$this_version" lt "${args[1]}"
    then
        # dpkg-divert --package "$pkg" --add --rename --divert "/etc/nginx/nginx.conf-$pkg" /etc/nginx/nginx.conf
        # dpkg-divert --package "$pkg" --add --divert "/etc/nginx/nginx.conf-$pkg" /etc/nginx/nginx.conf
        # The below is recommended on Debian Wiki and on IRC, but I find it
        # to NOT work because of issues when removing the diversion /benjaoming
        # dpkg-divert --add --rename /etc/nginx/nginx.conf
        
        # Use fully blown manual method
        pkg=$DPKG_MAINTSCRIPT_PACKAGE
        dpkg-divert --package "$pkg" --add --rename --divert "/etc/nginx/nginx.conf-$pkg" /etc/nginx/nginx.conf
        
        # Copy the distributed file to the location of nginx.conf
        # Only do this in case it doesn't exist, if it's an upgrade then the diversion doesn't happen and
        # we shouldn't add the link because it's already there.
        if ! [ -h /etc/nginx/nginx.conf ]
        then
            ln -s "/etc/nginx/nginx.conf.kalite" "/etc/nginx/nginx.conf"
        fi
    fi

}


# Called from postrm
kalite_nginx_divert_remove()
{
    # Restore diversion for /etc/nginx/nginx.conf
    # https://wiki.debian.org/Adding%20and%20removing%20diversions
    this_version=`major_version`

    losing_diversion=n

    if test "${args[0]}" = failed-upgrade
    then
        dpkg --compare-versions "${args[1]}" le-nl "$this_version" ||
        # An upgrade from a newer version failed.
        # There is no way for us to know enough to take over from here,
        # so abort the upgrade.
        exit 1
    elif dpkg --compare-versions "${args[1]}" lt-nl "$diversion_added_version"
    then
        diversion_list=`dpkg-divert --list /etc/nginx/nginx.conf`
        if ! [ "$diversion_list" = "" ]
        then
            losing_diversion=y
        fi
    fi

    case "${args[0]},$losing_diversion" in
    remove,*|abort-install,*|disappear,*|*,y)

        # benjaoming:
        # Remove the file to avoid:
        #    Removing 'diversion of /etc/nginx/nginx.conf to /etc/nginx/nginx.conf-ka-lite-raspberry-pi by ka-lite-raspberry-pi'
        #    dpkg-divert: error: rename involves overwriting `/etc/nginx/nginx.conf' with
        #    different file `/etc/nginx/nginx.conf-ka-lite-raspberry-pi', not allowed
        # rm -f /etc/nginx/nginx.conf
        # dpkg-divert --remove --rename /etc/nginx/nginx.conf
        # Recommendation of #debian-mentor of removing --package directive
        # seems to be a bad idea, the Debian Wiki is mis-guiding IMO
        # dpkg-divert --package "$pkg" --remove /etc/nginx/nginx.conf
        
        # Remove the symlink
        if [ -h /etc/nginx/nginx.conf ]
        then
            rm -f /etc/nginx/nginx.conf
        fi
        pkg=$DPKG_MAINTSCRIPT_PACKAGE
        # Check that the file actually exists, in some cases like "abort-install",
        # it may not have been created.
        if [ -e "/etc/nginx/nginx.conf-$pkg" ]
        then
            dpkg-divert --package "$pkg" --divert "/etc/nginx/nginx.conf-$pkg" --remove --rename /etc/nginx/nginx.conf
        fi
        ;;
    esac
}


# Helpful knowledge

# env for prerm
# SUDO_GID=1000 MAIL=/var/mail/root LANGUAGE=en_US:en USER=root HOME=/home/user LC_CTYPE=en_US.UTF-8 COLORTERM=gnome-terminal DPKG_MAINTSCRIPT_ARCH=amd64 SUDO_UID=1000 LOGNAME=root DPKG_RUNNING_VERSION=1.17.5 DPKG_MAINTSCRIPT_NAME=prerm TERM=xterm USERNAME=root PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin DISPLAY=:0 LANG=en_US.UTF-8 DPKG_MAINTSCRIPT_PACKAGE=test1 XAUTHORITY=/home/user/.Xauthority SUDO_COMMAND=/usr/bin/dpkg -i ../test1_1.0-1_amd64.deb SHELL=/bin/bash SUDO_USER=user DPKG_MAINTSCRIPT_PACKAGE_REFCOUNT=1 DPKG_ADMINDIR=/var/lib/dpkg PWD=/

# args for prerm
# upgrade 1.0-1

# env for upgrade, preinst
# SUDO_GID=1000 MAIL=/var/mail/root LANGUAGE=en_US:en USER=root HOME=/home/user LC_CTYPE=en_US.UTF-8 COLORTERM=gnome-terminal DPKG_MAINTSCRIPT_ARCH=amd64 SUDO_UID=1000 LOGNAME=root DPKG_RUNNING_VERSION=1.17.5 DPKG_MAINTSCRIPT_NAME=preinst TERM=xterm USERNAME=root PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin DISPLAY=:0 LANG=en_US.UTF-8 DPKG_MAINTSCRIPT_PACKAGE=test1 XAUTHORITY=/home/user/.Xauthority SUDO_COMMAND=/usr/bin/dpkg -i ../test1_1.0-1_amd64.deb SHELL=/bin/bash SUDO_USER=user DPKG_MAINTSCRIPT_PACKAGE_REFCOUNT=1 DPKG_ADMINDIR=/var/lib/dpkg PWD=/

# args for preinst
# upgrade 1.0-1

# env for postinst
# SUDO_GID=1000 MAIL=/var/mail/root LANGUAGE=en_US:en USER=root HOME=/home/user LC_CTYPE=en_US.UTF-8 COLORTERM=gnome-terminal DPKG_MAINTSCRIPT_ARCH=amd64 SUDO_UID=1000 LOGNAME=root DPKG_RUNNING_VERSION=1.17.5 DPKG_MAINTSCRIPT_NAME=postinst TERM=xterm USERNAME=root PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin DISPLAY=:0 LANG=en_US.UTF-8 DPKG_MAINTSCRIPT_PACKAGE=test1 XAUTHORITY=/home/user/.Xauthority SUDO_COMMAND=/usr/bin/dpkg -i ../test1_1.0-1_amd64.deb SHELL=/bin/bash SUDO_USER=user DPKG_MAINTSCRIPT_PACKAGE_REFCOUNT=1 DPKG_ADMINDIR=/var/lib/dpkg PWD=/

# args for postinst
# configure 1.0-1

